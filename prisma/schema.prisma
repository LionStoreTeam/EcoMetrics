generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // url      = "file:./dev.db"
}

// Modelo de Usuario
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  userType  UserType @default(INDIVIDUAL)
  points    Int      @default(0)
  level     Int      @default(1) // Nuevo campo para nivel persistente
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  profile    Profile?
  activities Activity[]
  rewards    Reward[]
  groups     GroupMember[]

  educationalArticles   EducationalArticle[]   @relation("UserEducationalArticles")
  articleRatings        ArticleRating[]        @relation("UserArticleRatings")
  notifications         Notification[] // Notificaciones recibidas por este usuario
  visualMaterials       VisualMaterial[]
  visualMaterialRatings VisualMaterialRating[]
  createdShortVideos    ShortVideo[]           @relation("UserShortVideos")
  shortVideoRating      ShortVideoRating[]     @relation("UserShortVideoRatings")
}

// Tipos de usuario
enum UserType {
  INDIVIDUAL
  SCHOOL
  COMMUNITY
  GOVERNMENT
}

// Roles de usuario
enum Role {
  USER
  ADMIN
}

// Perfil de usuario
model Profile {
  id        String  @id @default(cuid())
  bio       String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  phone     String?
  avatarUrl String? // Almacena la fileKey de S3 para el avatar

  // Relaciones
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  badges Badge[] @relation("ProfileBadges") // Actualizado 18 May
}

// Modelo de Grupo (escuelas, colonias, etc.)
model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        GroupType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  members    GroupMember[]
  activities Activity[]
}

// Tipos de grupo
enum GroupType {
  SCHOOL
  COMMUNITY
  GOVERNMENT
  OTHER
}

// Relación entre usuarios y grupos
model GroupMember {
  id       String    @id @default(cuid())
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  // Relaciones
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

// Roles dentro de un grupo
enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

// Modelo de Actividad Ecológica
model Activity {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        ActivityType
  quantity    Float
  unit        String
  points      Int
  date        DateTime
  status      ActivityStatus @default(PENDING_REVIEW) // Nuevo campo
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relaciones
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  String?
  group    Group?     @relation(fields: [groupId], references: [id], onDelete: SetNull)
  evidence Evidence[]

  @@index([userId])
  @@index([groupId])
  @@index([status]) // Indexar el nuevo campo de estado
}

enum ActivityStatus {
  PENDING_REVIEW
  REVIEWED
  // Podríamos añadir REJECTED si fuera necesario en el futuro
}

// Tipos de actividad
enum ActivityType {
  RECYCLING
  TREE_PLANTING
  WATER_SAVING
  COMPOSTING
  ENERGY_SAVING
  EDUCATION
  OTHER
}

// Añadir este modelo para las evidencias
model Evidence {
  id         String   @id @default(cuid())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  fileUrl    String
  fileType   String // "image" o "video"
  fileName   String
  fileSize   Int
  format     String // "jpg", "png", "mp4", etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([activityId])
}

// Categorías de recompensas
enum RewardCategory {
  DISCOUNT
  WORKSHOP
  PRODUCT
  RECOGNITION
  EXPERIENCE
  OTHER
}

// Modelo de Recompensa
model Reward {
  id          String         @id @default(cuid())
  title       String
  description String
  pointsCost  Int
  available   Boolean        @default(true)
  quantity    Int?
  expiresAt   DateTime?
  category    RewardCategory @default(OTHER)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relaciones
  userId      String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  redemptions Redemption[]
}

// Canje de recompensas
model Redemption {
  id         String           @id @default(cuid())
  redeemedAt DateTime         @default(now())
  status     RedemptionStatus @default(PENDING)
  createdAt  DateTime         @default(now())

  // Relaciones
  rewardId String
  reward   Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  userId   String
}

// Estado de canje
enum RedemptionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Modelo de Insignia
model Badge {
  id          String @id @default(cuid())
  name        String
  description String
  imageUrl    String
  criteria    String

  // Relaciones
  profiles Profile[] @relation("ProfileBadges")
}

// Modelo de Centro de Acopio
model RecyclingCenter {
  id           String  @id @default(cuid())
  name         String
  description  String?
  address      String
  city         String
  state        String
  zipCode      String?
  phone        String?
  email        String?
  website      String?
  latitude     Float?
  longitude    Float?
  openingHours String?

  // Relaciones
  materials CenterMaterial[]
}

// Materiales aceptados en centros de acopio
model Material {
  id          String           @id @default(cuid())
  name        String
  description String?
  category    MaterialCategory

  // Relaciones
  centers CenterMaterial[]
}

// Categorías de materiales
enum MaterialCategory {
  PLASTIC
  PAPER
  GLASS
  METAL
  ORGANIC
  ELECTRONIC
  HAZARDOUS
  OTHER
}

// Relación entre centros y materiales
model CenterMaterial {
  id String @id @default(cuid())

  // Relaciones
  centerId   String
  center     RecyclingCenter @relation(fields: [centerId], references: [id], onDelete: Cascade)
  materialId String
  material   Material        @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([centerId, materialId])
}

// NUEVO MODELO PARA NOTIFICACIONES
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Seccion de Modelos para Negocios
enum BusinessType {
  FOOD
  PRODUCTS
  SERVICES
  TECHNOLOGY
  HEALTH
  EDUCATION
  TOURISM
  OTHER
}

enum BusinessPromotionStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

// Modelo para las solicitudes de promoción de negocios
model BusinessPromotionRequest {
  id           String  @id @default(cuid())
  businessName String
  logoUrl      String? // Clave del archivo en S3
  description  String
  businessType String // Ej: "COMIDA", "PRODUCTOS", "SERVICIOS", "OTROS"
  address      String
  city         String
  state        String // Debería coincidir con MexicanState de lib/constants.ts
  zipCode      String?
  phone        String?
  email        String? // Correo de contacto del negocio
  website      String?
  latitude     Float?
  longitude    Float?
  openingHours String? // Puede ser un string formateado o JSON
  socialMedia  String? // Puede ser un string con links o JSON

  // Campos relacionados con Stripe y el pago
  paymentIntentId String? @unique // ID del PaymentIntent de Stripe
  paymentStatus   String? // Ej: "succeeded", "pending", "failed"
  amountPaid      Float? // Ej: 50.00
  currency        String? // Ej: "mxn"

  status BusinessPromotionStatus @default(PENDING_APPROVAL)

  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime? // Fecha de revisión por un administrador
  reviewerNotes String? // Notas del administrador

  @@index([status])
  @@index([businessType])
  @@index([state, city])
}

// Nuevo modelo para almacenar las URLs de las imágenes de los productos
model ProductImage {
  id                        String                  @id @default(cuid())
  url                       String // Clave del archivo en S3
  productPromotionRequestId String
  productPromotionRequest   ProductPromotionRequest @relation(fields: [productPromotionRequestId], references: [id], onDelete: Cascade) // onDelete: Cascade para borrar imágenes si se borra la solicitud

  createdAt DateTime @default(now())

  @@index([productPromotionRequestId])
}

// Modelo para las solicitudes de promoción de productos (Modificado)
model ProductPromotionRequest {
  id               String    @id @default(cuid())
  businessName     String
  productName      String
  businessLogoUrl  String? // Clave del archivo del logo del negocio en S3
  description      String
  businessType     String
  // productImageUrls String[] // <--- CAMPO ELIMINADO
  priceOrPromotion String
  address          String
  city             String
  state            String
  validUntil       DateTime?
  zipCode          String?
  phone            String?
  latitude         Float?
  longitude        Float?
  openingHours     String?
  contactEmail     String?
  website          String?
  socialMediaLinks String?

  paymentIntentId String? @unique
  paymentStatus   String?
  amountPaid      Float?
  currency        String?

  status BusinessPromotionStatus @default(PENDING_APPROVAL)

  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  reviewerNotes String?

  // Relación con las imágenes del producto
  productImages ProductImage[] // <--- NUEVO CAMPO DE RELACIÓN

  @@index([status])
  @@index([businessType])
  @@index([state, city])
  @@index([businessName])
  @@index([productName])
}

// Sección Educación

enum ArticleTopic {
  REDUCCION_RESIDUOS
  AHORRO_RECURSOS
  CONSUMO_RESPONSABLE
  BIODIVERSIDAD
  HUERTOS_URBANOS
  MOVILIDAD_SOSTENIBLE
  CAMBIO_CLIMATICO
  OTRO // Opción por si se añaden más temas no predefinidos
}

model EducationalArticle {
  id                String       @id @default(cuid())
  title             String
  content           String // @db.Text // Para contenido largo
  topic             ArticleTopic
  authorName        String
  authorInstitution String
  authorInfo        String? // Información adicional del autor (opcional)
  coverImageUrl     String? // URL de una imagen de portada (opcional)

  userId String // ID del usuario creador
  user   User   @relation("UserEducationalArticles", fields: [userId], references: [id], onDelete: Cascade) // Relación con el creador

  ratings ArticleRating[] // Relación con las valoraciones

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([topic])
}

model ArticleRating {
  id    String  @id @default(cuid())
  liked Boolean // true para "Me gusta", false para "No me gusta"

  articleId String
  article   EducationalArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserArticleRatings", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId]) // Un usuario solo puede valorar un artículo una vez
  @@index([articleId])
  @@index([userId])
}

// Enum para los tópicos del material visual (similar a ArticleTopic)
enum VisualMaterialTopic {
  INFOGRAFIA
  VIDEO_TUTORIAL
  PRESENTACION
  GALERIA_IMAGENES
  GUIA_VISUAL_RAPIDA
  ECO_RETO_VISUAL
  OTRO
}

model VisualMaterial {
  id                String              @id @default(cuid())
  title             String
  description       String?
  topic             VisualMaterialTopic // Nuevo enum para temas
  authorName        String
  authorInstitution String
  authorInfo        String? // Para información más larga
  userId            String // ID del User que lo creó
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  images  VisualMaterialImage[] // Relación uno-a-muchos con las imágenes
  ratings VisualMaterialRating[] // Relación uno-a-muchos con las valoraciones

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([topic])
}

model VisualMaterialImage {
  id               String         @id @default(cuid())
  s3Key            String // La clave del archivo en S3
  order            Int // Para mantener el orden de las imágenes
  visualMaterialId String
  visualMaterial   VisualMaterial @relation(fields: [visualMaterialId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([visualMaterialId])
}

model VisualMaterialRating {
  id               String         @id @default(cuid())
  liked            Boolean // true para "Me gusta", false para "No me gusta"
  visualMaterialId String
  visualMaterial   VisualMaterial @relation(fields: [visualMaterialId], references: [id], onDelete: Cascade)
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, visualMaterialId]) // Un usuario solo puede valorar una vez
  @@index([visualMaterialId])
  @@index([userId])
}

enum VideoTopic {
  TUTORIAL_PRACTICO
  CONSEJO_RAPIDO
  DEMOSTRACION_PROYECTO
  ENTREVISTA_EXPERTO
  ANIMACION_EXPLICATIVA
  ECO_NOTICIA_BREVE
  OTRO
}

model ShortVideo {
  id          String  @id @default(cuid())
  title       String
  description String?

  videoS3Key       String? // Clave del archivo de video en S3, ahora opcional
  externalVideoUrl String? // Nueva URL para videos externos
  // Podríamos añadir un enum VideoSourceType { S3, EXTERNAL_URL } si queremos ser más explícitos

  thumbnailS3Key    String?
  duration          Int?
  topic             VideoTopic
  authorName        String
  authorInstitution String
  authorInfo        String?
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserShortVideos")

  ratings ShortVideoRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Podríamos añadir una restricción a nivel de base de datos para asegurar que al menos uno de videoS3Key o externalVideoUrl esté presente.
  // @@check(COALESCE(videoS3Key, externalVideoUrl) IS NOT NULL) // Ejemplo de restricción (la sintaxis puede variar según la DB)

  @@index([userId])
  @@index([topic])
}

model ShortVideoRating {
  id           String     @id @default(cuid())
  liked        Boolean
  shortVideoId String
  shortVideo   ShortVideo @relation(fields: [shortVideoId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserShortVideoRatings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, shortVideoId])
  @@index([shortVideoId])
  @@index([userId])
}
