
* Requerimientos faltantes

- Mejorar el UI de Insignias.

- Puntos Totales => "Eco Points"

- Sección Inicio de Sesión y Registro: Mejorar la UI. 

- Página de Inicio: Mejorar la UI.

- Sección Recompensas: Agregar Rdecompensas REALES con funcionalidad independiente por cada una.
  • Verificar la funcionalidad cuando una Recompensa haya expirado.

- Usuarios PREMIUM descarga de archivo CVC


* Sección Educación



* Tipos de Contenido Educativo:

    - Artículos y Guías Prácticas:
        Temas:
            Reducción de Residuos: Técnicas de compostaje casero, cómo hacer una correcta separación de basura, ideas para reducir el uso de plásticos de un solo uso, manualidades con material reciclado (upcycling).
            Ahorro de Recursos: Consejos para ahorrar agua y energía en el hogar, la escuela o la oficina.
            Consumo Responsable: Cómo leer etiquetas de productos para identificar opciones sostenibles, beneficios de comprar local y de temporada, guías para identificar el "greenwashing".
            Biodiversidad y Ecosistemas Locales: Información sobre la flora y fauna de México (particularmente de Morelos, si se quiere un enfoque local), importancia de los polinizadores, cómo crear un jardín amigable con la naturaleza.
            Huertos Urbanos y Comunitarios: Guías paso a paso para iniciar un huerto, beneficios, tipos de plantas adecuadas para diferentes espacios.
            Movilidad Sostenible: Beneficios de caminar, usar bicicleta o transporte público.
            Cambio Climático: Explicaciones sencillas sobre qué es, sus causas, consecuencias y acciones individuales/comunitarias para mitigarlo.
        Formato: Textos claros, concisos, con buen uso de encabezados, listas y posiblemente acompañados de imágenes o infografías.

    - Infografías y Material Visual:
        Resúmenes visuales de los artículos y guías.
        Datos impactantes sobre problemáticas ambientales y soluciones.
        Diagramas de procesos (ej. ciclo del reciclaje, ciclo del agua).
        Muy útiles para compartir en redes sociales y para un aprendizaje rápido.

    - Videos Cortos (Tutoriales, Entrevistas, Casos de Éxito):
        Tutoriales DIY (Hazlo Tú Mismo) sobre cómo crear objetos reciclados, iniciar un compostador, etc.
        Entrevistas a expertos locales en sostenibilidad, dueños de negocios ecológicos, líderes comunitarios.
        Videos mostrando proyectos sostenibles exitosos en escuelas o comunidades (quizás vinculados a las actividades registradas en EcoMetrics).

    # - Calculadoras de Impacto Ambiental:
    #     Calculadora de huella de carbono personal o familiar.
    #     Calculadora de huella hídrica.
    #     Esto puede ayudar a los usuarios a tomar conciencia de su impacto y motivar cambios.

    - Directorio de Recursos Adicionales: "ENCARGADO POR Administradores"
        Enlaces a organizaciones gubernamentales relevantes (SEMARNAT, PROFEPA, secretarías de medio ambiente estatales como la de Morelos).
        ONGs y grupos civiles enfocados en sostenibilidad.
        Documentales, libros y sitios web recomendados.

    - Sección de "Mitos y Realidades" sobre Sostenibilidad:
        Aclarar conceptos erróneos comunes sobre reciclaje, cambio climático, etc.

    - Casos de Estudio y Testimonios:
        Mostrar cómo escuelas, comunidades o individuos han implementado prácticas sostenibles con éxito.
        Testimonios de usuarios de EcoMetrics sobre cómo la plataforma les ha ayudado.

* Funcionalidades de la Sección "Educación":

    - Categorización y Búsqueda:
        Organizar el contenido por temas (ej. Hogar, Escuela, Comunidad, Residuos, Agua, Energía, Biodiversidad).
        Un buscador interno para que los usuarios encuentren información específica rápidamente.
        Filtros por tipo de contenido (artículo, video, infografía).

    - Niveles de Dificultad o Audiencia:
        Posibilidad de marcar contenido para diferentes niveles (ej. básico, intermedio, avanzado) o audiencias (niños, jóvenes, adultos, educadores).

    - Sistema de Comentarios y Valoración (Opcional):
        Permitir a los usuarios comentar en los artículos o valorar el contenido. Esto requiere moderación.

    # - Contenido Descargable (Opcional):
    #     Algunas guías o infografías podrían ser descargables en PDF para uso offline o para imprimir.

    - Integración con Otras Secciones de EcoMetrics:
        Desde un artículo sobre reciclaje, enlazar a la sección de "Actividades" para registrar una acción de reciclaje.
        Desde la promoción de un negocio sostenible, enlazar a un artículo que explique por qué ese tipo de negocio es importante.

    - Sugerencias de Contenido Relacionado:
        Al final de un artículo, mostrar enlaces a otros artículos o recursos similares.





















# Se están presentando los siguientes errores que debes corregir:
# - En el formulario "Promociona tu Producto" hay un error en la validación de las imágenes del producto/servicio, ya que está generando el Error: Tipo de archivo no permitido, aún cuando es una imagen con el formato adecuado, ya que en los demás formularios la misma imagen es aceptada correctamente. 
# - Existe un error muy importante en el formulario y en el procesamiento del pago, ya que al generarse el "Error: Tipo de archivo no permitido", el pago es aceptado y procesado de manera correcta a pesar de que el formulario no fue éxitoso. 



# * Sección Negocios

# Utiliza el idioma Español. Te proporcionaré un repositorio de GitHub que contiene un proyecto llamado "EcoMetrics (Una Plataforma Web, diseñada para promover y gestionar prácticas ambientales sostenibles en escuelas, comunidades y gobiernos locales.)". El proyecto está desarrollado con Next JS(última versión), Typescript, Tailwind CSS, Prisma ORM y Amazon Web Services (AWS)(S3). Realiza un completo análisis del contenido total del proyecto y de todos sus archivos. Después de que finalices el análisis de proyecto te daré instrucciones de lo que necesito. 



# Continuando con el desarrollo del proyecto.
# Necesito que desarrolles una nueva interfaz con sus respectivos Endpoints llamada "Promociona tu Negocio", los requerimientos que debe contener son los siguientes:

# - Un formulario para dar de alta un nuevo "Negocio".
# - Está nueva sección "Promociona tu Negocio" no necesitará autenticación ni que el usuario se registre o inicie sesión
# - Sigue usando el mismo diseño de "UI" existente en el proyecto, no es necesario integrar clases para modo oscuro.
# - El formulario deberá contener los siguientes campos con sus respectivas validaciones:
#   • Nombre del Negocio.
#   • Input para subir una sola imagen con el Logo del Negocio(Puedes aplicar las mismas validaciones para "imágenes" ya existentes en el proyecto.).
#   • Descripción.
#   • Selector de Opciones para elegir el tipo de "Negocio"(Comida, Productos, Servicios, entre otros.).
#   • Dirección completa.
#   • Ciudad.
#   • Estado(Dentro del archivo "/lib/constants.ts" ya existe una constante con los 32 Estados de la República Mexicana).
#   • Teléfono.
#   • Código Postal.
#   • Ubicación Geográfica(Latitud, Longitud).
#   • Horarios de Atención.
#   • Correo.
#   • Sitio Web.
#   • Redes Sociales. 
#   • Integra Stripe como pasarela de Pagos.
#   • Añade toda la funcionalidad necesaria para procesar el pago.
#   . Al presionar el botón "Enviar Solicitud de Promoción" necesito que se muestre una pasarela de Pagos.
#   • El costo por promocionar y publicar el negocio deberá ser de "50.00 MXN".
#   • Permitir el envío del formulario únicamente después de que el pago y el formulario hayan sido procesados de manera correcta y con éxito.
#   • Todo el proceso de pago debe ser intuitivo mostrando "toast" o algo similar, por ejemplo(Cargando pasarela de pagos, Procesando pago, Procesando formulario, Pago aceptado/rechazado, Formulario aceptado/rechazado, etc.).
#   - Cada "Solicitud de Promoción" contará con tres "enum" (PENDING_APPROVAL, APPROVED, REJECTED) en el archivo schema.primsma. 


# Considerando las Implementaciones "Promociona tu Negocio" y "Negocios Disponibles" que desarrollaste, aplica las siguientes actualizaciones:

# Ahora genera la interfaz con sus respectivos Endpoints para que los Usuario "ADMIN" aprueben los Negocios que estén pendientes con respecto al formulario "Promociona tu Negocio". Recuerda seguir usando el mismo diseño de "UI" existente en el proyecto, no es necesario integrar clases para modo oscuro.

# Ahora me gustaría crear una nueva vista llamada "Negocios Disponibles" con los siguientes requerimientos:
# - Mostrar un Buscador por "Nombre".
# - Selector por "Estado" de la República Mexicana.
# - Selector por Tipo de Negocio.
# - Mostrar de forma muy atractiva todos los "Negocios" disponibles. 


# Considerando las nuevas Implementaciones "Promociona tu Negocio" y "Negocios Disponibles" que desarrollaste, 



















# Continuando con el desarrollo.
# Tomando como referencia todo el desarrollo que generaste en las interfaces, Endpoints anteriores y la aprobación por parte del Usuario "ADMIN" para el "Negocio".
# Necesito que desarrolles una nueva interfaz llamada "Promociona tu Producto", los requerimientos que debe contener son los siguientes:
# - Un formulario para dar de alta un nuevo "Producto".
# - Está nueva sección "Promociona tu Producto" no necesitará autenticación ni que el usuario se registre o inicie sesión.
# - Sigue usando el mismo diseño de UI existente en el proyecto, no es necesario integrar diseño para modo oscuro.
# - El formulario deberá contener los siguientes campos con sus respectivas válidaciones:
#   • Nombre del Negocio.
#   • Nombre del Producto.
#   • Input para subir una sola imagen con el Logo del Negocio(Puedes aplicar las mismas validaciones para "imágenes" ya existentes en el proyecto.).
#   • Descripción.
#   • Selector de Opciones para elegir el tipo de "Negocio"(Comida, Productos, Servicios, entre otros.).
#   • Input para subir mínimo 1 y máximo 3 imágenes de los Productos del Negocio(Puedes aplicar las mismas validaciones para "imágenes" ya existentes en el proyecto.).
#   • Precio o Promoción Ofertada.
#   • Dirección completa.
#   • Ciudad.
#   • Estado(Dentro del archivo "/lib/constants.ts" ya existe una constante con los 32 Estados de la República Mexicana).
#   • Válido hasta(En su defecto: "Siempre válido/disponible")
#   • Código Postal.
#   • Teléfono.
#   • Ubicación Geográfica(Latitud, Longitud).
#   • Horarios de Atención.
#   • Correo.
#   • Sitio Web.
#   • Redes Sociales(Unicamente Links en formato string).
#   • Integra Stripe como pasarela de Pagos.
#   • Añade toda la funcionalidad necesaria para procesar el pago.
#   . Al presionar el botón "Proceder al Pago" necesito que se muestre una pasarela de Pagos.
#   • El costo por promocionar y publicar el Producto deberá ser de "30.00 MXN".
#   • Permitir el envío del formulario únicamente después de que el pago y el formulario hayan sido procesados de manera correcta y con éxito.
#   • Todo el proceso de pago debe ser intuitivo mostrando "toast" o algo similar, por ejemplo(Cargando pasarela de pagos, Procesando pago, Procesando formulario, Pago aceptado/rechazado, Formulario aceptado/rechazado, etc.).
#   - Cada "Solicitud de Promoción de Producto" utilizará los tres "enum" (PENDING_APPROVAL, APPROVED, REJECTED) del archivo schema.primsma. 


# Basandote en el funcionamiento del Modelo "Evidence" del archivo schema.prisma y en los códigos de los archivos "/lib/s3-service.ts", "/app/api/activities/route.ts", "/app/api/admin/activities/route.ts", "/app/api/admin/activities/[activityId]/route.ts", "/app/actividades/page.tsx" y "/app/admin/view-act/page.tsx". Desarrolla de nuevo todos los archivos y endpoints necesarios para el correcto funcionamiento al mostrar los Productos Disponibles y la visualización de sus imágenes correspondientes para la interfaz "/app/productos-disponibles/page.tsx", puedes mantener la misma "UI" actual del archivo "/app/productos-disponibles/page.tsx".

# Falta modificar el Endpoint "/app/api/admin/product-promotions/[requestId]/route.ts" para mostrar las imágenes correspondientes de cada Producto.


# Ahora me gustaría crear una nueva vista llamada "Negocio Disponibles" con los siguientes requerimientos:
# - Mostrar un Buscador por "Nombre".
# - Selector por "Estado" de la República Mexicana.
# - Selector por Tipo de Negocio.
# - Mostrar de forma muy atractiva todos los "Negocios" disponibles.


# Considerando las nuevas Implementaciones "Promociona tu Negocio" y "Negocios Disponibles" que desarrollaste, ahora genera la interfaz para que los Usuario "ADMIN" aprueben los Negocios que estén pendientes con respecto al formulario "Promociona tu Negocio".


# Considerando las nuevas Implementaciones "Promociona tu Negocio" y "Negocios Disponibles" que desarrollaste y aplica las siguientes actualizaciones:
# En el formulario "Promociona tu Negocio" necesito añadir una nueva funcionalidad con los siguientes requerimientos:
# - Al precionar el botón "Enviar Solicitud de Promoción" necesito que se muestre una pasarela de Pagos.
# - Integra Stripe como pasarela de Pagos. 
# - El costo por promocionar y publicar el negocio deberá ser de "50.00 MXN"
# - Añade toda la funcionalidad necesaria para procesar el pago.
# - Permitir el evio del formulario únicamente después de que el pago haya sido procesado de manera correcta y con éxito.
# - Añade los "toast" correspondientes en caso de error o de éxito.


# Para la sección "Productos y Servicios Destacados" en la ruta "/app/productos-disponibles/page.tsx" me gustaría añadir una animación de expansión para las imágenes de los productos cuando se haga clic en ellas, igual a la animación de las imágenes en la sección "Actividades" en la ruta "/app/actividades/page.tsx". 


TEST CARD: 4242424242424242

* Para producción, es crucial usar webhooks


# Utiliza el idioma Español. Continuando con el desarrollo del proyecto. 

# Necesito realizar ajustes en los siguientes códigos o en lo códigos que consideres necesario:

# - Solo si consideras que es necesario actualiza el archivo "schema.prisma". 

# - "Endpoint" en la ruta "/app/api/activities/route.ts"

# - "Nueva Actividad" en la ruta "/app/actividades/nueva/page.tsx"

# - "Actividades" en la ruta "/app/actividades/page.tsx"


# * Exclusivo para usuario "ADMIN"

# - "Gestión de Actividades" en la ruta "/app/admin/view-act/page.tsx"

# - Sus respectivos Endpoints ubicados en la ruta "/app/api/admin/activities"




# Las actualizaciones de funcionalidad que necesito son las siguientes:

# - Cuando un "Usuario" suba una "Nueva Actividad" en el respectivo formulario, ya no se le asignarán "Puntos" de manera automática.

# - En la vista de "Actividades" se mostrara en la parte inferior del Card: "Pendiente por revisar" o en su defecto: "Revisado. Puntos Obtenidos: (Aquí se mostrarán los puntos que el "ADMIN" le otorgó por su Actividad)"


# * Exclusivo para usuario "ADMIN"

# - En la sección "Gestión de Actividades" se habilitará una nueva funcionalidad llamada "Calificar Actividad" con los siguientes valores: "10 pts", "30 pts", "50 pts", "75 pts" y "100 pts".

# - Ahora los Usuarios "ADMIN" podrán calificar las "Actividades" con respecto a la ponderación antes mencionada.

# - Agrega un nuevo Selector de Opciones con los valores "Calificadas" y "Por Calificar"

# - Las "Actividades" que estén pendientes "Por Calificar" aparecerán con fondo ligero en color "Rojo" y las "Actividades" "Calificadas" con un fondo en color "Verde".

# - Una vez que el Usuario "ADMIN" calificó una "Actividad" los puntos asignados para el "Usuario" se deberán almacenar en la Base de Datos y se deberá actualizar de manera automática en los Puntos Totales de dicho "Usuario".  

# - Después de que el Usuario "ADMIN" califico la "Actividad" se deberá enviar un mensaje de notificación de manera automática para el "Usuario", que contenga el Nombre de la Actividad calificada y la Cantidad de Puntos Obtenidos.




# En la sección "Gestión de Actividades" en la ruta "/app/admin/view-act/page.tsx", necesario estás nuevas implementaciones:
# - Poder "MODIFICAR" una "Calificación" que ya fue asignada.
# - Enviar un Mensaje de Notificación automático, cuando una "Actividad" haya sido eliminada por el Usuario "ADMIN"


































#   - Funcionalidades extas:
# Continuando con el desarrollo del proyecto. Necesito que integres una nueva funcionalidad que esté únicamente disponible para los usuarios "ADMIN", sus requerimientos son los siguientes:
# - Visualizar cada una de las "Actividades" realizadas de todos los Usuarios.
# - Añade el respectivo Buscador por "Nombre" y "Correo".
# - Añade el respectivo selector por "Tipo de Usuario".
# - Exclusivamente solo los usuarios "ADMIN" ahora podrán: "MODIFICAR" Y "ELIMINAR" cualquier actividad de todos los Usuarios.
# - Si se realiza una "MODIFICACIÓN" en alguna activadad, los "Puntos" actuales del Usuario no recibirán algún cambio.
# - Si se realiza una "ELIMINACIÓN" en alguna actividad, los puntos que fueron obtenidos con esa actividad deberán ser descontados de la Base de Datos. 
# - Desarrolla una funcionalidad que permita a los Usuarios "ADMIN" poder mandar "Mensajes de notificación" hacia los demás Usuarios.
# - Estos "Mensajes de notificación" deberán ser mostrados en la sección "Mi Perfil" en la ruta "/app/perfil/page.tsx"


# Después de integrar estás actualizaciones que generaste se presentarón los siguientes problemas:
# - Cuando el ADMIN "EDITAR" alguna Actividad por primera vez, se aplica la modificación de manera correcta, sin embargo al intentar "EDITAR" de nuevo la actividad se generá el error "Error: Datos inválidos - No se pudo actualizar", yo considero que el error se puede genera a partir de los "params" de la Actividad. 

# Después de solucionar los errores, las correcciones que necesito son las siguientes:
# - Si se actualiza el tipo o la cantidad, recalcular los puntos basados en la nueva información y actualizar los Puntos Totales del Usuario en la Base de Datos.
# - Poder ELIMINAR "Imágenes - Videos" de la Actividad.
# - Genera en endpoint "/api/admin/notifications" de manera correcta. 


# The file "/vercel/path0/.next/routes-manifest.json" couldn't be found. This is often caused by a misconfiguration in your project.


# - Sección Mapa: Integrar la API de Google Maps o Leaflet para mostrar un Mapa real.
# • Agregar la funcionalidad y ubicación REAL para los Centros de Acopio.

# Continuando con el desarrollo del proyecto. En la sección llamada "Mapas de Centros de Acopio" ubicada en la ruta "/app/mapa/page.tsx" Desarrollar su funcionalidad con los siguientes requerimientos:
# - Realiza un análisis complete del archivo "/app/mapa/page.tsx", Notarás que la funcionalidad original del el archivo "/app/mapa/page.tsx" es estática ya que se está "Simulando la carga de datos". 
# - Para evitar la simulación de datos considerá integrar las siguientes funcionalidades:
#     - Los requerimientos disponibles únicamente para los Usuarios Tipo "ADMIN" (Administradores) serán señalados con un "*"
#     * En la ruta "app/admin" desarrolla una nueva interfaz de Frontend con un formulario llamado "Añadir Nuevo Centro de Acopio", los datos que solicitará ese formulario serán:
#     * Título, Descripción, Dirección, Ubicación (Latitud y Longitud para una ubicación precisa y posteriormente ser mostrada en el mapa), Horarios,  "Materiales Aceptados", Teléfono, Email(Opcional), Sitio Web(Opcional), Social Media(Opcional), Selector con los "32 Estados" de la "República Mexicana".
#     * Los "Centros de Acopio" registrados por el formulario deberán ser duraderos y almacenados en la Base de Datos.

#     A partir de las modificaciones anteriores que realizaste. Ahora para la sección "Mapa de Centros de Acopio" en la ruta "/app/mapa/page.tsx" añade los siguientes requerimientos.
#     • Integra "Leaflet" para la visualización de un Mapa interactivo con respecto a los "Centro de Acopio" disponibles.
#     • Obten la (Latitud y Longitud) proveniente de la Base de Datos para cada uno de los "Centro de Acopio" y poder mostrarlos en el Mapa.
#     • Añade un Botón llamado "Obtener mi úbicación" para obtener la ubicación actual del Usuario y mostrarla en el Mapa.  
#     • La ubicación por defecto del Mapa deberá ser "Ciudad de México (CDMX) Zona Centro"(solo en caso de que no se obtenga de manerá automática la ubicación actual del Usuario).
#     • Cuando un usuario selecciona un Estado de la República Mexicana el Mapa se redireccionará al "Centro de Acopio" más cercano con respecto a la ubicación del Usuario.
#     • A partir de la ubicación del usuario o en su defecto "(CDMX) Zona Centro", se mostrará la lista de los "Centros de Acopio Encontrados" correspondientes a su ubicación actual o a la ubicación con respecto al selector de los 32 Estados.  
#     • Al dar clic sobre un "Centro de Acopio" disponible en la lista se redireccionará en el mapa a la ubicación de ese "Centro de Acopio" o en su defecto al presionar el botón "Ver en el Mapa".
#     • Por cada uno de los Centros de Acopio disponibles se deberá mostrar su respectivo "Marker".




# Continuando con el desarrollo del proyecto. Crea una nueva sección llamada "Insignias" con los siguiente requerimientos: 
# - Utiliza el Modelo "Badge" del archivo "schema.prisma" y asegurate de que las Insignias obtenidas sean persistentes en la Base de Datos.
# - Integrar un sistema de obtención de Insignias por Actividades completadas, Niveles superados, etc.
# - la ruta para el Frontend de las Insignias deberá estár en la ruta "/app/badges/page.tsx"
# - Mantener la "UI" igual que el resto del Frontend.
# - La visualización de todas las Insignias disponibles para conseguir, será en el Frontend "/app/badges/page.tsx"
# - La visualización de las "Insignias obtenidas" por el Usuario, será en el Frontend "app/perfil/page.tsx". Si lo deseas puedes crear un Componente en la carpeta "/components" para las "Insignias obtenidas" y así mantener más limpio el código original del archivo "app/perfil/page.tsx".
  


# - Sección Mi Perfil: Agregar funcionalidad para la subida y modificación de la foto de perfil del Usuario.
#     • Agregar funcionalidad para visualizar las Insignias obtenidad por el Usuario.
#     • Agregar validaciones en la modificación de datos del Usuario.

# - Desarrollar una nueva Sección llamada "Score": Donde se mostrarán en forma de lista todos los usuarios actuales de la plataforma. Los requerimientos para la sección "Score" serán los siguientes:
#     • Mantener la "UI" igual que el resto del Frontend.  
#     • Integrar un Buscador para "Nombre" o "Correo". 
#     • Un selector de visualización para agrupar la tabla por "Tipo de Usuario("Individual", "Escuela", "Comunidad" o "Gobierno")".
#     • Visualización en forma de tabla para cada Usuario registrado en la plataforma.
#     • Visualización de los siguientes datos para cada Usuario: Foto de Perfil, Nombre, Correo, Tipo de Usuario("Individual", "Escuela", "Comunidad" o "Gobierno"), Total de Actividades, Puntos Totales, Nivel actual, Miembro desde.



# - Analiza de nuevo el archivo "/lib/s3-service.ts".
# - También analiza el archivo "/prisma/schema.prisma", aquí enfocate en el Modelo:
# model Profile {
#   id        String  @id @default(cuid())
#   bio       String?
#   address   String?
#   city      String?
#   state     String?
#   zipCode   String?
#   phone     String?
#   avatarUrl String?

#   // Relaciones
#   userId String  @unique
#   user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
#   badges Badge[]
# }

# - Despues de analizar los dos archivos. Te proporcionaré 2 códigos nuevos de los archivos "/app/api/profile/route.ts" y "/app/perfil/page.tsx". y al final te daré instrucciones de lo que necesito.


# Para el archivo "/prisma/schema.prisma" el código es el siguiente: 


# Para el archivo "/lib/s3-service.ts" el código es el siguiente: 


# Para el archivo "/app/api/profile/route.ts" el código es el siguiente: 


# Para el archivo "/app/perfil/page.tsx" el código es el siguiente: 





# - Dentro de mi Bucket de Amazon Web Services (AWS) (S3) existe una carpeta llamada "userimageprofile".

# - Después de analizar los archivos "/lib/s3-service.ts", "/prisma/schema.prisma", "/app/api/profile/route.ts", "/app/perfil/page.tsx" y considerar la carpeta de AWS llamada "userimageprofile". 

# - Necesito que desarrolles la funcionalidad necesaria en el archivo "/app/perfil/page.tsx" para que el usuario pueda "SUBIR", "ACTUALIZAR" y "ELIMINAR" su foto de perfil, los requerimientos son los siguientes:
#     • La foto de perfil del usuario deberá ser almacenada en la carpeta "userimageprofile" de AWS y en la Base de Datos.
#     • Cada "ACTUALIZACIÓN" o "ELIMINACIÓN" de la foto de perfil se debe reflejar en AWS y en la Base de Datos. 
#     • Solo se permitirán imágenes con formato: (JPG, PNG, JPEG, WEBP).
#     • El tamaño máximo de la imágen deberá ser de: 5MB.
#     • Por defecto la foto inicial de perfil del usuario será la que se generá mediante la función "getInitials(Función para obtener las iniciales del nombre)".
#     • Si el usuario elimina su foto de perfil que previamente publicó, la foto de perfil por defecto será la que se generá mediante la función "getInitials".

# Te proporcionaré 4 códigos de mi proyecto desarrollado con Next JS, Typescript, Tailwind CSS, Prisma ORM y AWS (S3).
# 1° "/prisma/schema.prisma".
# 2° "/lib/s3-service.ts".
# 3° "/app/api/profile/route.ts".
# 4° "/app/perfil/page.tsx".

# Después de que te proporcioné el último código te daré instrucciones de lo que necesito.



# Utiliza el idioma Español. 
# Te proporcionaré un repositorio de Github que contiene un proyecto desarrollado con Next JS, TypeScrip, Tailwind CSS, Prisma ORM y Amazon Web Services (AWS)(S3). Realiza un completo análisis del contenido del proyecto y de todos sus archivos. Después de que finalices el análisis de proyecto de daré instrucciones de lo que necesito.



